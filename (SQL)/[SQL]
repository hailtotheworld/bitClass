USE market_db;
DROP PROCEDURE IF EXISTS user_proc1;
DELIMITER $$
CREATE PROCEDURE user_proc1(IN userName VARCHAR(10))
BEGIN
  SELECT * FROM member WHERE mem_name = userName; 
END $$
DELIMITER ;

CALL user_proc1('에이핑크');

drop procedure if exists proc1;
delimiter $$
create procedure proc1(in name varchar(10))
begin
	select * from member where mem_name=name;
end $$
delimiter ;

call proc1('소녀시대');



DROP PROCEDURE IF EXISTS dynamic_proc;
DELIMITER $$
CREATE PROCEDURE dynamic_proc(
    IN tableName VARCHAR(20)
)
BEGIN
  SET @sqlQuery = CONCAT('SELECT * FROM ', tableName);
  PREPARE myQuery FROM @sqlQuery;
  EXECUTE myQuery;
  DEALLOCATE PREPARE myQuery;
END $$
DELIMITER ;

CALL dynamic_proc ('member');




























drop procedure if exists testP1;
delimiter $$
create procedure testP1(
	IN txtValue varchar(10),
    OUT outValue int)
begin
	insert into notable values(null, txtValue);
    select max(id) into outValue from notable;
end $$
delimiter ;

drop table if exists notable;
create table notable(
	id int auto_increment primary key,
    text varchar(10));

call testP1('아이디',@myValue);
select @myValue;





drop procedure if exists testP;
delimiter $$
create procedure testP(in namep varchar(10), out idp int)
begin
	insert into notable values(null, namep);
    select max(id) into idp from notable;
end $$
delimiter ;

drop table if exists notable;
create table notable(
	id int primary key auto_increment,
    name varchar(10)
);

call testP('테스트',@idCount);
select @idCount from dual;

drop procedure if exists testTT;
delimiter $$
create procedure testTT(in tnamep varchar(10))
begin
	set @sqlQ = concat('select * from ', tnamep);
	prepare myQ from @sqlQ;
    execute myQ;
    deallocate prepare myQ;
end $$
delimiter ;

call testTT('buy');

drop procedure if exists testTT;
delimiter $$
create procedure testTT(in tnamep varchar(10))
begin
	set @sqlp = concat('select * from ', tnamep);
	prepare myQ from @sqlp;
    execute myQ;
    deallocate prepare myQ;
end $$
delimiter ;

call testTT('member');








drop procedure if exists testTT;
delimiter $$
create procedure testTT(in tname varchar(10))
begin
	set @tnameSet = concat('select * from ',tname);
	prepare myQ from @tnameSet;
    execute myQ;
    deallocate prepare myQ;
end $$
delimiter ;

call testTT('buy');

SET GLOBAL log_bin_trust_function_creators = 1;

drop function if exists sumFunc;
delimiter $$
create function sumFunc(num1 INT, num2 INT)
	returns INT
begin
	return num1 + num2;
end $$
delimiter ;

select sumFunc(50,70) from dual;

drop function if exists calcYearFunc;
delimiter $$
create function calcYearFunc(dYear date)
	returns int
begin
	return extract(year from sysdate()) - extract(year from dYear);
end $$
delimiter ;

select * from member;
select extract(year from sysdate())from dual;

select mem_id, debut_date, calcYearFunc(debut_date) from member;




grant all privileges on market_db.* to newlecture;

grant SUPER on *.* TO newlecture;

UPDATE mysql.user SET Super_Priv='Y' WHERE user='newlecture' AND host='%';

FLUSH PRIVILEGES;

GRANT SUPER ON *.* TO newlecture@localhost;





















